#!/bin/bash

# Check for systemd
if ! command -v systemctl &> /dev/null; then
    echo "Systemd does not appear to be installed. Exiting."
    exit 1
fi

# Ensure the script is run as root
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root. Please use sudo or switch to root."
    exit 1
fi

# Prepare SSH Key
SSHKEYPATH="$HOME/.ssh/generated_key"
mkdir -p "$HOME/.ssh"

# Generate SSH Key (without passphrase)
if [ ! -f "$SSHKEYPATH" ]; then
    ssh-keygen -t rsa -b 2048 -f "$SSHKEYPATH" -q -N ""
    chmod 600 "$SSHKEYPATH"
fi

# Format: "USERNAME LOCALPORT:REMOTEHOST:REMOTEPORT"
TUNNELS=(
    {% for port in node.ports.all %}"{{ node.name }} {{ port.entry_port }}:{{ node.hostname }}:{{ port.exit_port }}"
    {% endfor %}
)

# Create systemd service files
for i in "${!TUNNELS[@]}"; do
    IFS=' ' read -ra ADDR <<< "${TUNNELS[i]}"
    USERNAME=${ADDR[0]}
    # Splitting the TUNNELSPEC into local and remote parts
    IFS=':' read -ra PORTS <<< "${ADDR[1]}"
    LOCALPORT=${PORTS[0]}
    REMOTEHOST=${PORTS[1]}
    REMOTEPORT=${PORTS[2]}
    SERVICE_NAME="ssh-tunnel-$i.service"

    # Corrected ExecStart line to match the new syntax
    cat <<EOF > "/etc/systemd/system/$SERVICE_NAME"
[Unit]
Description=Keep Alive SSH Tunnel $i for $USERNAME
After=network.target

[Service]
# Assuming the user is the one that should run the command, if not, adjust User field
User=root
ExecStart=/usr/bin/ssh -NT -o ExitOnForwardFailure=yes -o ServerAliveInterval=60 -o IdentityFile=$SSHKEYPATH -R ${REMOTEPORT}:localhost:${LOCALPORT} ${USERNAME}@${REMOTEHOST}
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOF

    # Enable and start the service
    systemctl enable "$SERVICE_NAME"
    systemctl start "$SERVICE_NAME"

    echo "SSH Tunnel service $i has been successfully created, enabled, and started."
done

echo -e "\e[91mIMPORTANT: Paste the public key into the remote server's authorized_keys file for each user/host combination:\e[0m"
cat "$SSHKEYPATH.pub"
